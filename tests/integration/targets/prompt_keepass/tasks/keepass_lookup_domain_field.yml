- name: Keepass lookup specific domain entry username
  ansible.builtin.assert:
    that:
      - lookup('hczv.keepass.lookup', 'username', '{{ item }}') == 'my_domain_user'
    fail_msg: 'The value from the lookup does not match the expected value'
  loop:
    - undefined_host.subdomain.domain.tld
    - undefined_host2.subdomain.domain.tld
    - undefined_host3.subdomain.domain.tld

- name: Keepass lookup specific domain entry password
  ansible.builtin.assert:
    that:
      - lookup('hczv.keepass.lookup', 'password', '{{ item }}') == 'my_domain_password'
    fail_msg: 'The value from the lookup does not match the expected value'
  loop:
    - undefined_host.subdomain.domain.tld
    - undefined_host2.subdomain.domain.tld
    - undefined_host3.subdomain.domain.tld

- name: Keepass lookup specific domain entry username based on inventory_hostname
  ansible.builtin.assert:
    that:
      - lookup('hczv.keepass.lookup', 'username') == 'my_domain_user'
    fail_msg: 'The value from the lookup does not match the expected value'
  loop:
    - undefined_host.subdomain.domain.tld
    - undefined_host2.subdomain.domain.tld
    - undefined_host3.subdomain.domain.tld
  loop_control :
    loop_var: inventory_hostname

- name: Keepass lookup specific domain entry password based on inventory_hostname
  ansible.builtin.assert:
    that:
      - lookup('hczv.keepass.lookup', 'password') == 'my_domain_password'
    fail_msg: 'The value from the lookup does not match the expected value'
  loop:
    - undefined_host.subdomain.domain.tld
    - undefined_host2.subdomain.domain.tld
    - undefined_host3.subdomain.domain.tld
  loop_control :
    loop_var: inventory_hostname

- block:
    - name: Expect to fail with duplicate hosts
      set_fact:
        lookup_result: "{{ lookup('hczv.keepass.lookup', 'username', 'undefined_host.my_duplicated_subdomain.domain.tld') }}"
      ignore_errors: true

  rescue:
    - name: Handle the expected error
      debug:
        msg: "Lookup failed as expected with invalid arguments."


